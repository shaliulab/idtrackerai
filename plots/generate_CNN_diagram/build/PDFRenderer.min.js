jsPDF || alert("You are missing jspdf.js, get it here: https://github.com/MrRio/jsPDF");
if(jsPDF && THREE && !("PDFRenderer" in THREE)) {
  THREE.PDFRenderer = function() {
    var k, n, j, G, u, h, e, r, v, w, H, q, x, B, C, I = !1, D, E, z, c, f, o, y, A = function(a) {
      j.setDrawColor(a.color.r * 255, a.color.g * 255, a.color.b * 255);
      j.setFillColor(a.color.r * 255, a.color.g * 255, a.color.b * 255);
      a.wireframe ? (j.setLineWidth(a.wireframeLinewidth && !isNaN(a.wireframeLinewidth) ? a.wireframeLinewidth : 1), j.setLineCap(a.wireframeLinecap || 0), j.setLineJoin(a.wireframeLinejoin || 0)) : (j.setLineWidth(a.linewidth && !isNaN(a.linewidth) ? a.linewidth : 1), j.setLineCap(a.linecap || 0), j.setLineJoin(a.linejoin || 0))
    }, J = function(a, c) {
      if(c instanceof THREE.MeshBasicMaterial) {
        e.copy(c.color)
      }else {
        if(c instanceof THREE.MeshLambertMaterial) {
          if(I) {
            var f = c.color, h = c.emissive;
            e.r = r.r;
            e.g = r.g;
            e.b = r.b;
            var b = z, i = a.centroidWorld, d = a.normalWorld, l = e, p, o, g, k, n, m;
            p = 0;
            for(o = b.length;p < o;p++) {
              g = b[p], k = g.color, g instanceof THREE.DirectionalLight ? (n = g.matrixWorld.getPosition().normalize(), m = d.dot(n), m <= 0 || (m *= g.intensity, l.r += k.r * m, l.g += k.g * m, l.b += k.b * m)) : g instanceof THREE.PointLight && (n = g.matrixWorld.getPosition(), m = d.dot(H.sub(n, i).normalize()), m <= 0 || (m *= g.distance == 0 ? 1 : 1 - Math.min(i.distanceTo(n) / g.distance, 1), m != 0 && (m *= g.intensity, l.r += k.r * m, l.g += k.g * m, l.b += k.b * m)))
            }
            e.r = f.r * e.r + h.r;
            e.g = f.g * e.g + h.g;
            e.b = f.b * e.b + h.b
          }else {
            e.copy(c.color)
          }
        }else {
          c instanceof THREE.MeshDepthMaterial ? (f = 1 - c.__2near / (c.__farPlusNear - a.z * c.__farMinusNear), e.setRGB(f, f, f)) : c instanceof THREE.MeshNormalMaterial && e.setRGB(F(a.normalWorld.x), F(a.normalWorld.y), F(a.normalWorld.z))
        }
      }
      j.setDrawColor(e.r * 255, e.g * 255, e.b * 255);
      j.setFillColor(e.r * 255, e.g * 255, e.b * 255)
    }, F = function(a) {
      a = (a + 1) * 0.5;
      return a < 0 ? 0 : a > 1 ? 1 : a
    }, K = function() {
      console.log("THREE.PDFRenderer", THREE.REVISION);
      k = this;
      n = document.createElement("iframe");
      n.setAttribute("type", "application/pdf");
      n.setAttribute("style", "border:0x solid transparent !important");
      G = new THREE.Projector;
      u = new THREE.Rectangle;
      h = new THREE.Rectangle;
      e = new THREE.Color;
      r = new THREE.Color;
      v = new THREE.Color;
      w = new THREE.Color;
      H = new THREE.Vector3;
      this.domElement = n;
      this.sortElements = this.sortObjects = this.autoClear = !0
    }, g = function(a) {
      a.x *= B;
      a.x += B;
      a.y *= -C;
      a.y += C
    };
    K.prototype = {info:{render:{vertices:0, faces:0}}, setQuality:function() {
    }, setSize:function(a, c) {
      q = a;
      x = c;
      B = q / 2;
      C = x / 2;
      n.setAttribute("width", q);
      n.setAttribute("height", x);
      j = new jsPDF(q > x ? "landscape" : "portrait", "pt", [a, c]);
      u.set(0, 0, q, x)
    }, clear:function() {
    }, render:function(a, e) {
      if(e instanceof THREE.Camera === !1) {
        console.error("THREE.PDFRenderer.render: camera is not an instance of THREE.Camera.")
      }else {
        var s, t, b, i;
        this.autoClear && this.clear();
        k.info.render.vertices = 0;
        k.info.render.faces = 0;
        D = G.projectScene(a, e, this.sortObjects, this.sortElements);
        E = D.elements;
        z = D.lights;
        if(I = z.length > 0) {
          s = z;
          var d;
          r.setRGB(0, 0, 0);
          v.setRGB(0, 0, 0);
          w.setRGB(0, 0, 0);
          t = 0;
          for(i = s.length;t < i;t++) {
            b = s[t], d = b.color, b instanceof THREE.AmbientLight ? (r.r += d.r, r.g += d.g, r.b += d.b) : b instanceof THREE.DirectionalLight ? (v.r += d.r, v.g += d.g, v.b += d.b) : b instanceof THREE.PointLight && (w.r += d.r, w.g += d.g, w.b += d.b)
          }
        }
        s = 0;
        for(t = E.length;s < t;s++) {
          if(b = E[s], i = b.material, !(i === void 0 || i.visible === !1)) {
            if(h.empty(), b instanceof THREE.RenderableParticle) {
              c = b, g(c.positionScreen), b = c, i instanceof THREE.LineBasicMaterial && A(i), j.lines([[1, 1]], b.positionScreen.x, b.positionScreen.y, [1, 1], "S")
            }else {
              if(b instanceof THREE.RenderableLine) {
                c = b.v1, f = b.v2, g(c.positionScreen), g(f.positionScreen), h.addPoint(c.positionScreen.x, c.positionScreen.y), h.addPoint(f.positionScreen.x, f.positionScreen.y), u.intersects(h) && (b = c, d = f, i instanceof THREE.LineBasicMaterial && A(i), j.lines([[d.positionScreen.x - b.positionScreen.x, d.positionScreen.y - b.positionScreen.y]], b.positionScreen.x, b.positionScreen.y, [1, 1], "S"))
              }else {
                if(b instanceof THREE.RenderableFace3) {
                  if(c = b.v1, f = b.v2, o = b.v3, g(c.positionScreen), g(f.positionScreen), g(o.positionScreen), h.addPoint(c.positionScreen.x, c.positionScreen.y), h.addPoint(f.positionScreen.x, f.positionScreen.y), h.addPoint(o.positionScreen.x, o.positionScreen.y), u.intersects(h)) {
                    d = c;
                    var l = f, p = o;
                    k.info.render.vertices += 3;
                    k.info.render.faces++;
                    A(i);
                    J(b, i);
                    j.triangle(d.positionScreen.x, d.positionScreen.y, l.positionScreen.x, l.positionScreen.y, p.positionScreen.x, p.positionScreen.y, i.wireframe ? "S" : "F")
                  }
                }else {
                  if(b instanceof THREE.RenderableFace4 && (c = b.v1, f = b.v2, o = b.v3, y = b.v4, g(c.positionScreen), g(f.positionScreen), g(o.positionScreen), g(y.positionScreen), h.addPoint(c.positionScreen.x, c.positionScreen.y), h.addPoint(f.positionScreen.x, f.positionScreen.y), h.addPoint(o.positionScreen.x, o.positionScreen.y), h.addPoint(y.positionScreen.x, y.positionScreen.y), u.intersects(h))) {
                    d = c;
                    var l = f, p = o, q = y;
                    k.info.render.vertices += 4;
                    k.info.render.faces++;
                    A(i);
                    J(b, i);
                    b = [];
                    b.push([l.positionScreen.x - d.positionScreen.x, l.positionScreen.y - d.positionScreen.y]);
                    b.push([p.positionScreen.x - l.positionScreen.x, p.positionScreen.y - l.positionScreen.y]);
                    b.push([q.positionScreen.x - p.positionScreen.x, q.positionScreen.y - p.positionScreen.y]);
                    b.push([d.positionScreen.x - q.positionScreen.x, d.positionScreen.y - q.positionScreen.y]);
                    j.lines(b, d.positionScreen.x, d.positionScreen.y, [1, 1], i.wireframe ? "S" : "F")
                  }
                }
              }
            }
          }
        }
        n.src = j.output("datauristring")
      }
    }, getPDF:function() {
      return j
    }};
    return K
  }()
}
;